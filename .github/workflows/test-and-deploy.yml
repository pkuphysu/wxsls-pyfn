name: Test and Deploy Serverless

on:
  pull_request:
  push:
    paths-ignore:
      - "**.md"

jobs:
  deploy:
    name: test and deploy serverless
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: wechat
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.5
      - name: Determine env
        id: env
        if: ${{ ! contains(github.event.head_commit.message, '[skip-deploy]') }}
        run: |
          if [ $GITHUB_REF == 'refs/heads/master' ]; then
            echo '::set-output name=deploy::true'
            echo '::set-output name=stage::prod'
            echo '::set-output name=dynaconf_env::production'
          elif [ $GITHUB_REF == 'refs/heads/dev' ]; then
            echo '::set-output name=deploy::true'
            echo '::set-output name=stage::dev'
            echo '::set-output name=dynaconf_env::development'
          fi
      - name: Get poetry paths
        id: poetry-path
        run: |
          echo "::set-output name=cache-dir::$(poetry config cache-dir)"
          poetry run python -c "from distutils.sysconfig import get_python_lib;print('::set-output name=lib-dir::' + get_python_lib())"
      - name: Cache Poetry
        uses: actions/cache@v2.1.4
        id: cache
        with:
          path: ${{ steps.poetry-path.outputs.cache-dir }}
          key: poetry-${{ steps.env.outputs.stage }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ steps.env.outputs.stage }}-
      - name: Check Venv And Install Requirements
        shell: bash
        run: |
          poetry run python -c 'import pytest' || \
          ( poetry install --no-root && poetry run python -c 'import pytest' ) || \
          ( poetry env remove python && poetry install --no-root && poetry run python -c 'import pytest' )
      - name: Run test
        run: poetry run pytest

      - name: Dump secrets
        if: steps.env.outputs.deploy
        run: echo $SECRETS | base64 --decode > src/pkuphysu_wechat/config/.secrets.toml
        env:
          SECRETS: ${{ secrets.SECRET_SETTING }}
      - name: Install serverless
        if: steps.env.outputs.deploy
        run: curl -o- -L https://slss.io/install | bash

      - name: Deploy serverless
        if: steps.env.outputs.deploy && steps.cache.outputs.cache-hit != 'true'
        timeout-minutes: 10
        run: |
          set -o pipefail
          $HOME/.serverless/bin/sls deploy | grep -v -e '中 ' -e 'ing ' -e NA
        env:
          STAGE: ${{ steps.env.outputs.stage }}
          LAYER_SRC: ${{ steps.poetry-path.outputs.lib-dir }}
          DYNACONF_ENV: ${{ steps.env.outputs.dynaconf_env}}
          SERVERLESS_PLATFORM_VENDOR: tencent
          TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
          TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
      - name: Deploy serverless code
        if: steps.env.outputs.deploy && steps.cache.outputs.cache-hit == 'true'
        timeout-minutes: 5
        run: |
          set -o pipefail
          $HOME/.serverless/bin/sls deploy --target src | grep -v -e '中 ' -e 'ing ' -e NA
        env:
          STAGE: ${{ steps.env.outputs.stage }}
          DYNACONF_ENV: ${{ steps.env.outputs.dynaconf_env}}
          SERVERLESS_PLATFORM_VENDOR: tencent
          TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
          TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
